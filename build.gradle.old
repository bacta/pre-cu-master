import java.util.function.BiConsumer

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.ajoberstar:gradle-git:1.6.0"
  }
}

allprojects {

  group = 'com.ocdsoft.bacta'
  version = '1.0.0-SNAPSHOT'

  def file = new File("build.properties")

  if (file.exists()) {

    def props = new Properties()
    file.withInputStream {
      stream -> props.load(stream)
    }
    props.forEach(new BiConsumer<String, String>() {
      @Override
      void accept(String key, String value) {
        properties.put(key, value)
      }
    })
  }
}


subprojects {

  apply plugin: 'java'
  apply plugin: 'groovy'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  configurations {
    quasar
  }

  configurations.all {
    resolutionStrategy {
      //failOnVersionConflict()
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()

    maven { url "file:../repo/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }

  dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.5'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.5'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.8'
    compile group: 'com.google.inject', name: 'guice', version: '4.0'
    compile group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '4.0'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.10'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
    compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.6'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'java3d', name: 'vecmath', version: '1.3.1'
    compile group: 'joda-time', name: 'joda-time', version: '2.9.3'
    compile 'org.codehaus.groovy:groovy-all:2.4.6'

    testCompile(
      'junit:junit:4.12',
      'org.codehaus.groovy:groovy-all:2.4.6',
      'org.spockframework:spock-core:1.0-groovy-2.4',
      'cglib:cglib-nodep:3.2.2'
    )
  }
}

project (':engine') {
  //project.evaluationDependsOn(':quasar-core')

  description = 'engine'
  dependencies {
    compile "steerio:steerio:1.0.0"
    compile group: 'com.squareup', name: 'javapoet', version:'1.6.1'
    compile group: 'io.netty', name: 'netty-all', version:'4.0.24.Final'
    compile group: 'com.esotericsoftware', name: 'kryo', version:'3.0.3'
    compile ("de.javakaffee:kryo-serializers:0.37") {
      exclude group: 'org.slf4j', module: '*'
    }
  }
}

project (':iff') {
  description = 'iff'
  dependencies {
    compile ("com.jcraft:jzlib:1.1.3")
  }
}

project (':tre') {
  description = 'tre'
  dependencies {
    compile ("com.jcraft:jzlib:1.1.3")
  }
}

project (':couchbase-connector') {
  group = 'com.ocdsoft.bacta.data.couchbase'
  description = 'couchbase-connector'
  dependencies {
    compile project(':pre-cu')
    compile group: 'com.couchbase.client', name: 'couchbase-client', version: '1.4.12'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.6.2'
  }

  task copyDeps(type: Copy, dependsOn: [build]) {
    from(configurations.runtime) {
      include 'couchbase-client**.jar'
      include 'netty-3**.jar'
      include 'jettison**.jar'
      include 'stax-api**.jar'
      include 'spymemcached**.jar'
      include 'httpcore**.jar'
      include 'gson**.jar'
    }
    into "build/depends"
  }

// Copy if build is for couchbase
  task copyDependsToDist(type: Copy, dependsOn: [build]) {
    String dbType = allprojects.getProperties().get("database")
    if (dbType == null || dbType.equalsIgnoreCase("couchbase")) {
      from("build/depends")
      into "../dist/libs"
    }
  }

  task copyLibToDist(type: Copy, dependsOn: [build]) {
    String dbType = allprojects.getProperties().get("database")
    if (dbType == null || dbType.equalsIgnoreCase("couchbase")) {
      from("build/libs")
      into "../dist/libs"
    }
  }
  task copyFiles(dependsOn: [copyDeps, copyDependsToDist, copyLibToDist])

  build.finalizedBy copyFiles
}

project (':soe') {

  apply plugin: "org.ajoberstar.grgit"

  description = 'soe'
  dependencies {
    compile project(':engine')
    compile group: 'io.netty', name: 'netty-all', version:'4.0.24.Final'
    compile group: 'com.jcraft', name: 'jzlib', version:'1.1.3'
    compile group: 'com.lmax', name: 'disruptor', version:'3.3.4'
    compile group: 'org.apache.velocity', name: 'velocity', version:'1.7'
    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version:'3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-annotation', version:'3.1.2'
    compile group: 'io.dropwizard.metrics', name: 'metrics-healthchecks', version:'3.1.2'
    compile group: 'commons-modeler', name: 'commons-modeler', version:'2.0.1'
    compile group: 'co.paralleluniverse', name: 'quasar-core', version:'0.7.5'
    compile group: 'co.paralleluniverse', name: 'quasar-actors', version:'0.7.5'
  }

  task writeGitProperties(dependsOn:[processResources]) {
    File file = file('./build/resources/main/git-soe.properties')
    if (file.exists())
      file.delete()

    Properties props = new Properties()
    props.put("git.commit.id.abbrev", grgit.head().abbreviatedId)
    props.put("git.commit.id", grgit.head().id)
    props.put("git.commit.user.name", grgit.head().committer.name)
    props.put("git.commit.message.short", grgit.head().shortMessage)
    props.put("git.commit.time", String.valueOf(grgit.head().time))

    file.getParentFile().mkdirs()
    file.createNewFile()
    props.store(new FileOutputStream(file), "SOE Git Properties")
  }

  processResources.finalizedBy writeGitProperties
}

project (":pre-cu") {
  apply plugin: 'application'
  apply plugin: "org.ajoberstar.grgit"

  sourceCompatibility = '1.8'
  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

  mainClassName = 'com.ocdsoft.bacta.swg.server.PreCuServer'



  def RUN_GROUP = 'Run'

  description = 'pre-cu'

  configurations {
    quasar
  }

  configurations.all {
    resolutionStrategy {
      //failOnVersionConflict()
    }
  }

  dependencies {
    quasar "co.paralleluniverse:quasar-core:0.7.5:jdk8"
    compile project(':engine')
    compile project(':soe')
    compile project(':iff')
    compile group: 'steerio', name: 'steerio', version: '1.0.0'
    compile group: 'org.igniterealtime.smack', name: 'smack-core', version: '4.0.1'
    compile project(':tre')
    compile group: 'org.igniterealtime.smack', name: 'smack-tcp', version: '4.0.1'
    compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    compile group: 'co.paralleluniverse', name: 'quasar-core', version: '0.7.5', classifier: 'jdk8'

    // Read the database from the optional properties file
    String dbType = allprojects.getProperties().get("database")
    if (dbType == null) {
      dbType = "couchbase"
    }

    // Include the requested libraries in the debug runtime
    runtime fileTree(dir: '../' + dbType + '-connector/build/libs')
    runtime fileTree(dir: '../' + dbType + '-connector/build/depends')
  }

// Build the appropriate database project in case build all wasn't invoked
  task buildDatabaseDepends(type: GradleBuild) {
    String dbType = allprojects.getProperties().get("database")
    if (dbType == null) {
      dbType = "couchbase"
    }

    buildFile = '../' + dbType + '-connector/build.gradle'
    tasks = ['build']
  }

  task runLogin(type: JavaExec, dependsOn: [build]) {
    group = RUN_GROUP
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.ocdsoft.bacta.swg.server.PreCuServer'
    args 'login'
  }

  task runChat(type: JavaExec, dependsOn: [build]) {
    group = RUN_GROUP
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.ocdsoft.bacta.swg.server.PreCuServer'
    args 'chat'
  }

  task runGame(type: JavaExec, dependsOn: [build]) {
    group = RUN_GROUP
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.ocdsoft.bacta.swg.server.PreCuServer'
    args 'game'
  }

  task runSWG(type: JavaExec, dependsOn: [build]) {
    group = RUN_GROUP
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.ocdsoft.bacta.swg.server.PreCuServer'
    args 'login', 'chat', 'game'
  }

  clean << {
    file('../dist').deleteDir()
  }

  task createStartScripts(type: CreateStartScripts) {
    file('../dist').mkdir()
    file('../dist/libs').mkdir()
    file('../dist/scripts').mkdir()

    File bashScript = file('../dist/start.sh')
    File batScript = file('../dist/start.bat')

    bashScript.withPrintWriter {
      it.println '#!/bin/sh'
      it.println "java -cp \"libs/*\" com.ocdsoft.bacta.swg.server.PreCuServer login chat game"
    }

    batScript.withPrintWriter {
      it.println "java -cp \"libs/*\" com.ocdsoft.bacta.swg.server.PreCuServer login chat game"
    }

    // make it executable
    ant.chmod(file: bashScript.absolutePath, perm: 'u+x')
  }

  task copyArtifactsToDist(type: Copy, dependsOn: [build]) {
    from "build/libs"
    into "../dist/libs"
  }

  task copyLibToDist(type: Copy, dependsOn: [build]) {
    into "../dist/libs"
    from configurations.runtime
  }

  task copyConfToDist(type: Copy, dependsOn: [build]) {
    into "../dist/conf"
    from "../conf"
  }

  task writeGitProperties(dependsOn: [processResources]) {
    File file = file('./build/resources/main/git-soe.properties')
    if (file.exists())
      file.delete()

    Properties props = new Properties()
    props.put("git.commit.id.abbrev", grgit.head().abbreviatedId)
    props.put("git.commit.id", grgit.head().id)
    props.put("git.commit.user.name", grgit.head().committer.name)
    props.put("git.commit.message.short", grgit.head().shortMessage)
    props.put("git.commit.time", String.valueOf(grgit.head().time))

    file.getParentFile().mkdirs()
    file.createNewFile()
    props.store(new FileOutputStream(file), "SOE Git Properties")
  }

  if (project.hasProperty('method')) {
    apply from: "../gradle/${project.getProperty('method')}.gradle"
  } else {
    apply from: "../gradle/agent.gradle"
  }

  task copyFiles(dependsOn: [copyArtifactsToDist, copyLibToDist, copyConfToDist])

  build.finalizedBy copyFiles, buildDatabaseDepends
  processResources.finalizedBy writeGitProperties

}
